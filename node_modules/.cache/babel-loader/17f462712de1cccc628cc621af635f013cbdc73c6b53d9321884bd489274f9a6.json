{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amina\\\\VScode\\\\FQW_new\\\\src\\\\components\\\\DocumentAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react'; // Import useMemo\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport Modal from 'react-modal'; // <--- Import react-modal\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport './DocumentAnalysis.css'; // Ensure this CSS file exists and is imported\n\n// --- Modal Accessibility ---\n// Bind modal to your appElement (usually root div) for screen readers\n// Ideally, do this once at the top level of your app, but here works too.\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root'); // Assuming your root div has id=\"root\"\n\n// Регистрируем компоненты Chart.js\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nfunction DocumentAnalysis() {\n  _s();\n  var _selectedDocumentForM;\n  const [documents, setDocuments] = useState([]);\n  const [workers, setWorkers] = useState([]);\n  const [selectedWorker, setSelectedWorker] = useState(null); // Keep null initially\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [viewMode, setViewMode] = useState('analysis');\n\n  // --- State for Modal ---\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedDocumentForModal, setSelectedDocumentForModal] = useState(null);\n  // --- End State for Modal ---\n\n  const navigate = useNavigate();\n  const user = JSON.parse(localStorage.getItem('user'));\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError('');\n      try {\n        // Загрузка документов\n        const documentsResponse = await axios.get(`http://localhost:5000/api/documents`, {\n          params: {\n            userId: user.id,\n            // Backend might need workerId instead, see backend logic\n            role: user.role\n          }\n        });\n        if (!Array.isArray(documentsResponse.data)) {\n          console.error('Ожидался массив документов, получено:', documentsResponse.data);\n          setDocuments([]);\n        } else {\n          console.log(\"Backend: Documents received (first 2):\", JSON.stringify(documentsResponse.data.slice(0, 2), null, 2));\n          setDocuments(documentsResponse.data);\n          if (documentsResponse.data.length > 0) {\n            var _documentsResponse$da;\n            console.log(\"Sample KKS_Names in first fetched document:\", (_documentsResponse$da = documentsResponse.data[0]) === null || _documentsResponse$da === void 0 ? void 0 : _documentsResponse$da.KKS_Names);\n          }\n        }\n\n        // Если пользователь - Администратор (role === 1), загружаем список работников\n        if (user.role === 1) {\n          const workersResponse = await axios.get('http://localhost:5000/api/workers');\n          if (Array.isArray(workersResponse.data)) {\n            setWorkers(workersResponse.data);\n            // Set initial selected worker *only if* workers list is not empty\n            if (workersResponse.data.length > 0 && selectedWorker === null) {\n              setSelectedWorker(workersResponse.data[0].ID_Worker);\n            } else if (workersResponse.data.length === 0) {\n              setSelectedWorker(null); // No workers, no selection\n            }\n            // If selectedWorker already has a value (e.g., from previous interaction), don't reset it.\n          } else {\n            console.error(\"Workers data is not an array:\", workersResponse.data);\n            setWorkers([]);\n            setSelectedWorker(null);\n          }\n        } else {\n          // For non-admin users, no need to load workers or have a selection\n          setWorkers([]);\n          setSelectedWorker(null);\n        }\n      } catch (err) {\n        var _err$response, _err$response$data;\n        console.error('Ошибка при загрузке данных:', err);\n        setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || 'Ошибка при загрузке данных');\n      } finally {\n        setLoading(false); // Ensure loading is set to false in all cases\n      }\n    };\n    if (user !== null && user !== void 0 && user.id) {\n      fetchData();\n    } else {\n      setError(\"Пользователь не найден. Пожалуйста, войдите снова.\");\n      setLoading(false);\n    }\n    // Add selectedWorker to dependency array if filtering depends on it immediately\n  }, [user === null || user === void 0 ? void 0 : user.id, user === null || user === void 0 ? void 0 : user.role]); // Removed selectedWorker from deps for initial load\n\n  const handleLogout = () => {\n    localStorage.removeItem('user');\n    navigate('/login');\n  };\n  const handleBack = () => {\n    navigate(user.role === 1 ? '/admin' : '/user');\n  };\n  const handleWorkerChange = event => {\n    // Ensure value is parsed correctly, handle potential empty string/null\n    const workerIdValue = event.target.value;\n    const workerId = workerIdValue ? parseInt(workerIdValue, 10) : null;\n    setSelectedWorker(workerId);\n  };\n  const handleViewModeChange = mode => {\n    setViewMode(mode);\n  };\n\n  // --- Modal Handlers ---\n  const openModal = doc => {\n    console.log(\"Opening modal for doc:\", doc); // Log document data\n    setSelectedDocumentForModal(doc);\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setSelectedDocumentForModal(null); // Clear selected doc when closing\n  };\n  // --- End Modal Handlers ---\n\n  // Фильтрация документов по выбранному работнику (или все для пользователя)\n  const filteredDocuments = useMemo(() => {\n    if (loading || !Array.isArray(documents)) return []; // Ensure documents is an array\n\n    if (user.role === 1) {\n      // If admin and a worker is selected, filter by that worker\n      if (selectedWorker !== null) {\n        return documents.filter(doc => doc.ID_Worker === selectedWorker);\n      }\n      // If admin and no worker is selected (e.g. initially or list is empty) - show nothing or default\n      // Let's show nothing if no worker is selected to avoid confusion\n      return [];\n      // Alternatively, show the first worker's docs by default if workers exist:\n      // if (workers.length > 0) {\n      //    const defaultWorkerId = selectedWorker ?? workers[0]?.ID_Worker;\n      //    return documents.filter(doc => doc.ID_Worker === defaultWorkerId);\n      // } else {\n      //    return []; // No workers, show nothing\n      // }\n    } else {\n      // If not admin, show all documents fetched for that user\n      // The backend already filters by userId/workerId for role 0\n      return documents;\n    }\n  }, [documents, selectedWorker, user.role, loading]); // Removed 'workers' dependency as it's handled within the logic\n\n  // 1. График по годам и нарастающий график\n  const prepareYearlyChartData = docs => {\n    const documentsByYear = docs.reduce((acc, doc) => {\n      try {\n        // Ensure DateIssue is valid before creating Date object\n        if (doc.DateIssue) {\n          const date = new Date(doc.DateIssue);\n          if (!isNaN(date.getTime())) {\n            const year = date.getFullYear();\n            acc[year] = (acc[year] || 0) + 1;\n          } else {\n            console.warn(\"Invalid DateIssue format for document ID:\", doc.ID_Document, \"Value:\", doc.DateIssue);\n          }\n        } else {\n          console.warn(\"Missing DateIssue for document ID:\", doc.ID_Document);\n        }\n      } catch (e) {\n        console.error(\"Error parsing DateIssue for document ID:\", doc.ID_Document, e);\n      }\n      return acc;\n    }, {});\n    const years = Object.keys(documentsByYear).map(Number).sort((a, b) => a - b);\n    const currentYear = new Date().getFullYear();\n\n    // Determine the range of years to display\n    const minDataYear = years.length > 0 ? Math.min(...years) : currentYear;\n    const maxDataYear = years.length > 0 ? Math.max(...years) : currentYear;\n    // Include years from min found year up to the current year if it's later\n    const startYear = minDataYear;\n    const endYear = Math.max(maxDataYear, currentYear);\n    const allYears = [];\n    if (startYear <= endYear) {\n      // Ensure start is not after end\n      for (let year = startYear; year <= endYear; year++) {\n        allYears.push(year);\n      }\n    } else if (years.length === 0 && docs.length > 0) {\n      // Handle case where docs exist but have invalid dates - show current year?\n      console.warn(\"No valid years found in documents, showing current year as fallback.\");\n      allYears.push(currentYear);\n    } else if (docs.length === 0) {\n      // No documents, maybe show just the current year or an empty range\n      // allYears.push(currentYear); // Option 1: Show current year\n      // Option 2: Leave allYears empty if no docs\n    }\n    const counts = allYears.map(year => documentsByYear[year] || 0);\n    const cumulativeCounts = counts.reduce((acc, count, index) => {\n      acc.push(index === 0 ? count : (acc[index - 1] || 0) + count);\n      return acc;\n    }, []);\n    return {\n      years: allYears,\n      counts,\n      cumulativeCounts\n    };\n  };\n\n  // 2. График по критериям ККС\n  const prepareKKSChartData = docs => {\n    const kksCounts = docs.reduce((acc, doc) => {\n      const kksString = doc.KKS_Names;\n      // Check if KKS_Names is a non-empty string before splitting\n      if (kksString && typeof kksString === 'string') {\n        const criteria = kksString.split(',').map(kks => kks.trim()) // Trim whitespace\n        .filter(kks => kks !== ''); // Remove empty strings resulting from split\n\n        // Log only if criteria were found after split/trim/filter\n        if (criteria.length > 0) {\n          console.log(`Processing Doc ID: ${doc.ID_Document}, KKS_Names: '${kksString}', Parsed Criteria: [${criteria.join(', ')}]`);\n          criteria.forEach(criterion => {\n            acc[criterion] = (acc[criterion] || 0) + 1;\n          });\n        } else if (kksString.trim() !== '') {\n          // Log if the original string wasn't empty but split resulted in nothing (e.g., just commas)\n          console.log(`Processing Doc ID: ${doc.ID_Document}, KKS_Names: '${kksString}' resulted in no valid criteria after split/trim.`);\n        }\n      } else if (kksString !== null && kksString !== undefined && kksString !== '') {\n        // Warn if KKS_Names is present but not a string\n        console.warn(\"KKS_Names is not a valid string for document:\", doc.ID_Document, \"Type:\", typeof kksString, \"Value:\", kksString);\n      }\n      // If KKS_Names is null, undefined, or empty string, silently skip\n      return acc;\n    }, {});\n\n    // Sort criteria alphabetically for consistent chart display\n    const sortedCriteria = Object.keys(kksCounts).sort((a, b) => a.localeCompare(b));\n    const counts = sortedCriteria.map(criterion => kksCounts[criterion]);\n    return {\n      criteria: sortedCriteria,\n      counts\n    };\n  };\n\n  // Вычисляем данные для графиков на основе отфильтрованных документов\n  // Use useMemo to prevent recalculating on every render unless dependencies change\n  const yearlyChartResult = useMemo(() => prepareYearlyChartData(filteredDocuments), [filteredDocuments]);\n  const kksChartResult = useMemo(() => prepareKKSChartData(filteredDocuments), [filteredDocuments]);\n\n  // --- Настройки для графиков ---\n\n  const getWorkerName = () => {\n    if (user.role !== 1 || !selectedWorker || !Array.isArray(workers)) return ''; // Add check for workers array\n    const worker = workers.find(w => w.ID_Worker === selectedWorker);\n    return worker ? worker.FName_Worker : `ID ${selectedWorker}`; // Assuming FName_Worker exists\n  };\n  const yearlyData = useMemo(() => ({\n    labels: yearlyChartResult.years,\n    datasets: [{\n      label: user.role === 1 ? `Документы (по годам) - ${getWorkerName() || 'Выберите работника'}` // Add fallback text\n      : 'Мои документы (по годам)',\n      data: yearlyChartResult.counts,\n      backgroundColor: 'rgba(54, 162, 235, 0.6)',\n      borderColor: 'rgba(54, 162, 235, 1)',\n      borderWidth: 1\n    }]\n  }), [yearlyChartResult, user.role, selectedWorker, workers]); // Add dependencies\n\n  const cumulativeData = useMemo(() => ({\n    labels: yearlyChartResult.years,\n    datasets: [{\n      label: user.role === 1 ? `Нарастающий график - ${getWorkerName() || 'Выберите работника'}` : 'Мой нарастающий график',\n      data: yearlyChartResult.cumulativeCounts,\n      backgroundColor: 'rgba(75, 192, 192, 0.6)',\n      borderColor: 'rgba(75, 192, 192, 1)',\n      borderWidth: 1\n    }]\n  }), [yearlyChartResult, user.role, selectedWorker, workers]); // Add dependencies\n\n  const kksData = useMemo(() => ({\n    labels: kksChartResult.criteria,\n    datasets: [{\n      label: user.role === 1 ? `Документы по критериям ККС - ${getWorkerName() || 'Выберите работника'}` : 'Мои документы по критериям ККС',\n      data: kksChartResult.counts,\n      backgroundColor: 'rgba(255, 159, 64, 0.6)',\n      // Orange color\n      borderColor: 'rgba(255, 159, 64, 1)',\n      borderWidth: 1\n    }]\n  }), [kksChartResult, user.role, selectedWorker, workers]); // Add dependencies\n\n  // --- Chart Options (using useMemo for optimization) ---\n  const commonOptions = useMemo(() => titleText => ({\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: titleText,\n        font: {\n          size: 16\n        } // Adjust font size if needed\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: titleText.includes('годам') ? 'Год' : titleText.includes('ККС') ? 'Критерий ККС' : ''\n        },\n        ticks: {\n          autoSkip: true,\n          // Allow skipping labels if too crowded\n          maxRotation: 45,\n          // Rotate labels if needed\n          minRotation: 0\n        }\n      },\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Количество документов'\n        },\n        ticks: {\n          // stepSize: 1, // Use only if integer steps are strictly required\n          precision: 0 // Ensure integer ticks\n          // Suggest max based on data to prevent large empty spaces, Chart.js usually handles this well\n          // suggestedMax: Math.max(...(data?.datasets[0]?.data || [])) + 2 // Example if needed\n        }\n      }\n    }\n  }), []); // Empty dependency array as the function itself doesn't change\n\n  const yearlyOptions = useMemo(() => commonOptions(user.role === 1 ? `Количество документов по годам (${getWorkerName() || 'Выберите работника'})` : 'Мои документы по годам'), [commonOptions, user.role, selectedWorker, workers]); // Add dependencies\n\n  const cumulativeOptions = useMemo(() => commonOptions(user.role === 1 ? `Нарастающий итог документов по годам (${getWorkerName() || 'Выберите работника'})` : 'Мой нарастающий итог документов по годам'), [commonOptions, user.role, selectedWorker, workers]); // Add dependencies\n\n  const kksOptions = useMemo(() => commonOptions(user.role === 1 ? `Распределение документов по критериям ККС (${getWorkerName() || 'Выберите работника'})` : 'Мое распределение документов по критериям ККС'), [commonOptions, user.role, selectedWorker, workers]); // Add dependencies\n\n  // Helper to format date strings or return placeholder\n  const formatDate = dateString => {\n    if (!dateString) return 'N/A';\n    try {\n      const date = new Date(dateString);\n      // Check if date is valid after parsing\n      return isNaN(date.getTime()) ? 'Неверная дата' : date.toLocaleDateString();\n    } catch (e) {\n      console.error(\"Error formatting date:\", dateString, e);\n      return 'Ошибка даты';\n    }\n  };\n\n  // --- Рендеринг ---\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 415,\n    columnNumber: 25\n  }, this);\n  // Keep error display simple or enhance as needed\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBack,\n      className: \"back-button\",\n      children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 418,\n    columnNumber: 8\n  }, this);\n\n  // Main component return\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"analysis-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"analysis-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0410\\u043D\\u0430\\u043B\\u0438\\u0437 \\u0434\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u043E\\u0432\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBack,\n          className: \"back-button\",\n          children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          className: \"logout-button\",\n          children: \"\\u0412\\u044B\\u0439\\u0442\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 13\n    }, this), user.role === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"worker-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"worker-select\",\n          children: \"\\u0420\\u0430\\u0431\\u043E\\u0442\\u043D\\u0438\\u043A:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 26\n        }, this), workers.length > 0 ? /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"worker-select\",\n          value: selectedWorker !== null && selectedWorker !== void 0 ? selectedWorker : '' // Use empty string if null for controlled component\n          ,\n          onChange: handleWorkerChange,\n          className: \"worker-select\",\n          disabled: loading,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: selectedWorker !== null,\n            children: \"-- \\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0440\\u0430\\u0431\\u043E\\u0442\\u043D\\u0438\\u043A\\u0430 --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 33\n          }, this), workers.map(worker => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: worker.ID_Worker,\n            children: [worker.FName_Worker || `ID ${worker.ID_Worker}`, \" \"]\n          }, worker.ID_Worker, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 37\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 28\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"no-workers-message\",\n          children: \"\\u041D\\u0435\\u0442 \\u0440\\u0430\\u0431\\u043E\\u0442\\u043D\\u0438\\u043A\\u043E\\u0432 \\u0434\\u043B\\u044F \\u0432\\u044B\\u0431\\u043E\\u0440\\u0430.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 21\n      }, this), workers.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"view-mode-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `view-mode-button ${viewMode === 'analysis' ? 'active' : ''}`,\n          onClick: () => handleViewModeChange('analysis'),\n          disabled: selectedWorker === null // Disable if no worker selected\n          ,\n          children: \"\\u0410\\u043D\\u0430\\u043B\\u0438\\u0437\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `view-mode-button ${viewMode === 'documents' ? 'active' : ''}`,\n          onClick: () => handleViewModeChange('documents'),\n          disabled: selectedWorker === null // Disable if no worker selected\n          ,\n          children: \"\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-area\",\n      children: viewMode === 'analysis' ?\n      /*#__PURE__*/\n      // --- Analysis View (Charts) ---\n      _jsxDEV(\"div\", {\n        className: \"charts-grid\",\n        children: (user.role !== 1 || selectedWorker !== null) && filteredDocuments.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(Bar, {\n              options: yearlyOptions,\n              data: yearlyData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(Bar, {\n              options: cumulativeOptions,\n              data: cumulativeData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-wrapper kks-chart-wrapper\",\n            children: kksChartResult.criteria.length > 0 ? /*#__PURE__*/_jsxDEV(Bar, {\n              options: kksOptions,\n              data: kksData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"no-data-message\",\n              children: \"\\u041D\\u0435\\u0442 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u043F\\u043E \\u043A\\u0440\\u0438\\u0442\\u0435\\u0440\\u0438\\u044F\\u043C \\u041A\\u041A\\u0421 \\u0434\\u043B\\u044F \\u043E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u044F.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) :\n        /*#__PURE__*/\n        // Message when no documents or no worker selected for admin\n        _jsxDEV(\"div\", {\n          className: \"no-data-message full-width-message\",\n          children: user.role === 1 ? selectedWorker === null ? \"Пожалуйста, выберите работника для просмотра анализа.\" : `Нет документов для анализа у выбранного работника (${getWorkerName()}).` : \"У вас пока нет загруженных документов для анализа.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 30\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 22\n      }, this) :\n      /*#__PURE__*/\n      // --- Documents View (Table) ---\n      _jsxDEV(\"div\", {\n        className: \"documents-list\",\n        children: (user.role !== 1 || selectedWorker !== null) && filteredDocuments.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"documents-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [user.role === 1 && /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0420\\u0430\\u0431\\u043E\\u0442\\u043D\\u0438\\u043A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 530,\n                columnNumber: 61\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u041F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u0430\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0420\\u0435\\u0433. \\u043D\\u043E\\u043C\\u0435\\u0440\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 41\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0414\\u0430\\u0442\\u0430 \\u0432\\u044B\\u0434\\u0430\\u0447\\u0438\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 534,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 535,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 528,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: filteredDocuments.map(doc => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [user.role === 1 && /*#__PURE__*/_jsxDEV(\"td\", {\n                children: doc.WorkerName || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 542,\n                columnNumber: 65\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: doc.ProgramName || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 543,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: doc.OrgSName || doc.OrgFName || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 545,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: doc.regnumber || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 546,\n                columnNumber: 45\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n                children: formatDate(doc.DateIssue)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 547,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"details-button\",\n                  onClick: () => openModal(doc) // <--- Call openModal on click\n                  ,\n                  children: \"\\u041F\\u043E\\u0434\\u0440\\u043E\\u0431\\u043D\\u043E\\u0441\\u0442\\u0438\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 549,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 548,\n                columnNumber: 45\n              }, this)]\n            }, doc.ID_Document, true, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 29\n        }, this) :\n        /*#__PURE__*/\n        // Message when no documents or no worker selected for admin\n        _jsxDEV(\"div\", {\n          className: \"no-data-message\",\n          children: user.role === 1 ? selectedWorker === null ? \"Пожалуйста, выберите работника для просмотра документов.\" : `Нет документов для выбранного работника (${getWorkerName()}).` : \"У вас пока нет загруженных документов.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: closeModal // Allows closing by clicking overlay or pressing Esc\n      ,\n      contentLabel: \"\\u0414\\u0435\\u0442\\u0430\\u043B\\u0438 \\u0434\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u0430\" // For screen readers\n      ,\n      className: \"modal-content\" // Class for modal styling\n      ,\n      overlayClassName: \"modal-overlay\" // Class for overlay styling\n      ,\n      children: selectedDocumentForModal ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"\\u0414\\u0435\\u0442\\u0430\\u043B\\u0438 \\u0434\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u0430 \\u2116 \", selectedDocumentForModal.regnumber || selectedDocumentForModal.ID_Document]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeModal,\n          className: \"modal-close-button\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-details-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u0420\\u0430\\u0431\\u043E\\u0442\\u043D\\u0438\\u043A:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 32\n            }, this), \" \", selectedDocumentForModal.WorkerName || 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u041F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u0430:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 32\n            }, this), \" \", selectedDocumentForModal.ProgramName || 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 32\n            }, this), \" \", `${selectedDocumentForModal.OrgFName || ''} (${selectedDocumentForModal.OrgSName || 'N/A'})`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u0420\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u043E\\u043D\\u043D\\u044B\\u0439 \\u043D\\u043E\\u043C\\u0435\\u0440:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 590,\n              columnNumber: 32\n            }, this), \" \", selectedDocumentForModal.regnumber || 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u0421\\u0435\\u0440\\u0438\\u044F \\u0431\\u043B\\u0430\\u043D\\u043A\\u0430:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 591,\n              columnNumber: 32\n            }, this), \" \", selectedDocumentForModal.formseries || 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0431\\u043B\\u0430\\u043D\\u043A\\u0430:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 32\n            }, this), \" \", selectedDocumentForModal.formnumber || 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u0414\\u0430\\u0442\\u0430 \\u0432\\u044B\\u0434\\u0430\\u0447\\u0438:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 593,\n              columnNumber: 32\n            }, this), \" \", formatDate(selectedDocumentForModal.DateIssue)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u0414\\u0430\\u0442\\u0430 \\u043D\\u0430\\u0447\\u0430\\u043B\\u0430 \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044F:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 32\n            }, this), \" \", formatDate(selectedDocumentForModal.DataStart)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u0414\\u0430\\u0442\\u0430 \\u043E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u044F \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044F:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 32\n            }, this), \" \", formatDate(selectedDocumentForModal.DataEnd)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"kks-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u041A\\u0440\\u0438\\u0442\\u0435\\u0440\\u0438\\u0438 \\u041A\\u041A\\u0421:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 57\n            }, this), \" \", ((_selectedDocumentForM = selectedDocumentForModal.KKS_Names) === null || _selectedDocumentForM === void 0 ? void 0 : _selectedDocumentForM.split(',').map(k => k.trim()).filter(k => k).join(', ')) || 'Нет данных']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0435\\u0442\\u0430\\u043B\\u0435\\u0439...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 21\n      }, this) // Fallback content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 426,\n    columnNumber: 9\n  }, this);\n}\n_s(DocumentAnalysis, \"gaVMCLPM8eLCs3+0byR4/oAK/q4=\", false, function () {\n  return [useNavigate];\n});\n_c = DocumentAnalysis;\nexport default DocumentAnalysis;\nvar _c;\n$RefreshReg$(_c, \"DocumentAnalysis\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","useNavigate","Modal","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","jsxDEV","_jsxDEV","Fragment","_Fragment","setAppElement","register","DocumentAnalysis","_s","_selectedDocumentForM","documents","setDocuments","workers","setWorkers","selectedWorker","setSelectedWorker","loading","setLoading","error","setError","viewMode","setViewMode","isModalOpen","setIsModalOpen","selectedDocumentForModal","setSelectedDocumentForModal","navigate","user","JSON","parse","localStorage","getItem","fetchData","documentsResponse","get","params","userId","id","role","Array","isArray","data","console","log","stringify","slice","length","_documentsResponse$da","KKS_Names","workersResponse","ID_Worker","err","_err$response","_err$response$data","response","handleLogout","removeItem","handleBack","handleWorkerChange","event","workerIdValue","target","value","workerId","parseInt","handleViewModeChange","mode","openModal","doc","closeModal","filteredDocuments","filter","prepareYearlyChartData","docs","documentsByYear","reduce","acc","DateIssue","date","Date","isNaN","getTime","year","getFullYear","warn","ID_Document","e","years","Object","keys","map","Number","sort","a","b","currentYear","minDataYear","Math","min","maxDataYear","max","startYear","endYear","allYears","push","counts","cumulativeCounts","count","index","prepareKKSChartData","kksCounts","kksString","criteria","split","kks","trim","join","forEach","criterion","undefined","sortedCriteria","localeCompare","yearlyChartResult","kksChartResult","getWorkerName","worker","find","w","FName_Worker","yearlyData","labels","datasets","label","backgroundColor","borderColor","borderWidth","cumulativeData","kksData","commonOptions","titleText","responsive","maintainAspectRatio","plugins","legend","position","title","display","text","font","size","tooltip","intersect","scales","x","includes","ticks","autoSkip","maxRotation","minRotation","y","beginAtZero","precision","yearlyOptions","cumulativeOptions","kksOptions","formatDate","dateString","toLocaleDateString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","htmlFor","onChange","disabled","options","WorkerName","ProgramName","OrgSName","OrgFName","regnumber","isOpen","onRequestClose","contentLabel","overlayClassName","formseries","formnumber","DataStart","DataEnd","k","_c","$RefreshReg$"],"sources":["D:/Amina/VScode/FQW_new/src/components/DocumentAnalysis.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'; // Import useMemo\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Modal from 'react-modal'; // <--- Import react-modal\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport './DocumentAnalysis.css'; // Ensure this CSS file exists and is imported\r\n\r\n// --- Modal Accessibility ---\r\n// Bind modal to your appElement (usually root div) for screen readers\r\n// Ideally, do this once at the top level of your app, but here works too.\r\nModal.setAppElement('#root'); // Assuming your root div has id=\"root\"\r\n\r\n// Регистрируем компоненты Chart.js\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\n\r\nfunction DocumentAnalysis() {\r\n    const [documents, setDocuments] = useState([]);\r\n    const [workers, setWorkers] = useState([]);\r\n    const [selectedWorker, setSelectedWorker] = useState(null); // Keep null initially\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState('');\r\n    const [viewMode, setViewMode] = useState('analysis');\r\n\r\n    // --- State for Modal ---\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [selectedDocumentForModal, setSelectedDocumentForModal] = useState(null);\r\n    // --- End State for Modal ---\r\n\r\n    const navigate = useNavigate();\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            setError('');\r\n            try {\r\n                // Загрузка документов\r\n                const documentsResponse = await axios.get(`http://localhost:5000/api/documents`, {\r\n                    params: {\r\n                        userId: user.id, // Backend might need workerId instead, see backend logic\r\n                        role: user.role\r\n                    }\r\n                });\r\n\r\n                if (!Array.isArray(documentsResponse.data)) {\r\n                    console.error('Ожидался массив документов, получено:', documentsResponse.data);\r\n                    setDocuments([]);\r\n                } else {\r\n                    console.log(\"Backend: Documents received (first 2):\", JSON.stringify(documentsResponse.data.slice(0, 2), null, 2));\r\n                    setDocuments(documentsResponse.data);\r\n                    if (documentsResponse.data.length > 0) {\r\n                         console.log(\"Sample KKS_Names in first fetched document:\", documentsResponse.data[0]?.KKS_Names);\r\n                    }\r\n                }\r\n\r\n                // Если пользователь - Администратор (role === 1), загружаем список работников\r\n                if (user.role === 1) {\r\n                    const workersResponse = await axios.get('http://localhost:5000/api/workers');\r\n                     if (Array.isArray(workersResponse.data)) {\r\n                         setWorkers(workersResponse.data);\r\n                         // Set initial selected worker *only if* workers list is not empty\r\n                         if (workersResponse.data.length > 0 && selectedWorker === null) {\r\n                            setSelectedWorker(workersResponse.data[0].ID_Worker);\r\n                         } else if (workersResponse.data.length === 0) {\r\n                             setSelectedWorker(null); // No workers, no selection\r\n                         }\r\n                         // If selectedWorker already has a value (e.g., from previous interaction), don't reset it.\r\n                     } else {\r\n                        console.error(\"Workers data is not an array:\", workersResponse.data);\r\n                        setWorkers([]);\r\n                        setSelectedWorker(null);\r\n                     }\r\n                } else {\r\n                    // For non-admin users, no need to load workers or have a selection\r\n                    setWorkers([]);\r\n                    setSelectedWorker(null);\r\n                }\r\n\r\n            } catch (err) {\r\n                console.error('Ошибка при загрузке данных:', err);\r\n                setError(err.response?.data?.error || 'Ошибка при загрузке данных');\r\n            } finally {\r\n                 setLoading(false); // Ensure loading is set to false in all cases\r\n            }\r\n        };\r\n\r\n        if (user?.id) {\r\n          fetchData();\r\n      } else {\r\n          setError(\"Пользователь не найден. Пожалуйста, войдите снова.\");\r\n          setLoading(false);\r\n      }\r\n        // Add selectedWorker to dependency array if filtering depends on it immediately\r\n    }, [user?.id, user?.role]); // Removed selectedWorker from deps for initial load\r\n\r\n    const handleLogout = () => {\r\n        localStorage.removeItem('user');\r\n        navigate('/login');\r\n    };\r\n\r\n    const handleBack = () => {\r\n        navigate(user.role === 1 ? '/admin' : '/user');\r\n    };\r\n\r\n    const handleWorkerChange = (event) => {\r\n        // Ensure value is parsed correctly, handle potential empty string/null\r\n        const workerIdValue = event.target.value;\r\n        const workerId = workerIdValue ? parseInt(workerIdValue, 10) : null;\r\n        setSelectedWorker(workerId);\r\n    };\r\n\r\n\r\n    const handleViewModeChange = (mode) => {\r\n        setViewMode(mode);\r\n    };\r\n\r\n    // --- Modal Handlers ---\r\n    const openModal = (doc) => {\r\n        console.log(\"Opening modal for doc:\", doc); // Log document data\r\n        setSelectedDocumentForModal(doc);\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n        setSelectedDocumentForModal(null); // Clear selected doc when closing\r\n    };\r\n    // --- End Modal Handlers ---\r\n\r\n    // Фильтрация документов по выбранному работнику (или все для пользователя)\r\n    const filteredDocuments = useMemo(() => {\r\n        if (loading || !Array.isArray(documents)) return []; // Ensure documents is an array\r\n\r\n        if (user.role === 1) {\r\n            // If admin and a worker is selected, filter by that worker\r\n            if (selectedWorker !== null) {\r\n                 return documents.filter(doc => doc.ID_Worker === selectedWorker);\r\n            }\r\n            // If admin and no worker is selected (e.g. initially or list is empty) - show nothing or default\r\n             // Let's show nothing if no worker is selected to avoid confusion\r\n            return [];\r\n           // Alternatively, show the first worker's docs by default if workers exist:\r\n           // if (workers.length > 0) {\r\n           //    const defaultWorkerId = selectedWorker ?? workers[0]?.ID_Worker;\r\n           //    return documents.filter(doc => doc.ID_Worker === defaultWorkerId);\r\n           // } else {\r\n           //    return []; // No workers, show nothing\r\n           // }\r\n        } else {\r\n            // If not admin, show all documents fetched for that user\r\n             // The backend already filters by userId/workerId for role 0\r\n            return documents;\r\n        }\r\n    }, [documents, selectedWorker, user.role, loading]); // Removed 'workers' dependency as it's handled within the logic\r\n\r\n    // 1. График по годам и нарастающий график\r\n    const prepareYearlyChartData = (docs) => {\r\n        const documentsByYear = docs.reduce((acc, doc) => {\r\n            try {\r\n                // Ensure DateIssue is valid before creating Date object\r\n                if (doc.DateIssue) {\r\n                    const date = new Date(doc.DateIssue);\r\n                    if (!isNaN(date.getTime())) {\r\n                        const year = date.getFullYear();\r\n                        acc[year] = (acc[year] || 0) + 1;\r\n                    } else {\r\n                        console.warn(\"Invalid DateIssue format for document ID:\", doc.ID_Document, \"Value:\", doc.DateIssue);\r\n                    }\r\n                } else {\r\n                     console.warn(\"Missing DateIssue for document ID:\", doc.ID_Document);\r\n                }\r\n            } catch (e) {\r\n                console.error(\"Error parsing DateIssue for document ID:\", doc.ID_Document, e);\r\n            }\r\n            return acc;\r\n        }, {});\r\n\r\n\r\n        const years = Object.keys(documentsByYear).map(Number).sort((a, b) => a - b);\r\n        const currentYear = new Date().getFullYear();\r\n\r\n        // Determine the range of years to display\r\n        const minDataYear = years.length > 0 ? Math.min(...years) : currentYear;\r\n        const maxDataYear = years.length > 0 ? Math.max(...years) : currentYear;\r\n        // Include years from min found year up to the current year if it's later\r\n        const startYear = minDataYear;\r\n        const endYear = Math.max(maxDataYear, currentYear);\r\n\r\n        const allYears = [];\r\n        if (startYear <= endYear) { // Ensure start is not after end\r\n             for (let year = startYear; year <= endYear; year++) {\r\n                allYears.push(year);\r\n             }\r\n        } else if (years.length === 0 && docs.length > 0) {\r\n            // Handle case where docs exist but have invalid dates - show current year?\r\n             console.warn(\"No valid years found in documents, showing current year as fallback.\");\r\n             allYears.push(currentYear);\r\n        } else if (docs.length === 0) {\r\n             // No documents, maybe show just the current year or an empty range\r\n             // allYears.push(currentYear); // Option 1: Show current year\r\n             // Option 2: Leave allYears empty if no docs\r\n        }\r\n\r\n\r\n        const counts = allYears.map(year => documentsByYear[year] || 0);\r\n\r\n        const cumulativeCounts = counts.reduce((acc, count, index) => {\r\n            acc.push(index === 0 ? count : (acc[index - 1] || 0) + count);\r\n            return acc;\r\n        }, []);\r\n\r\n        return {\r\n            years: allYears,\r\n            counts,\r\n            cumulativeCounts\r\n        };\r\n    };\r\n\r\n\r\n    // 2. График по критериям ККС\r\n    const prepareKKSChartData = (docs) => {\r\n        const kksCounts = docs.reduce((acc, doc) => {\r\n            const kksString = doc.KKS_Names;\r\n             // Check if KKS_Names is a non-empty string before splitting\r\n            if (kksString && typeof kksString === 'string') {\r\n                const criteria = kksString.split(',')\r\n                    .map(kks => kks.trim()) // Trim whitespace\r\n                    .filter(kks => kks !== ''); // Remove empty strings resulting from split\r\n\r\n                // Log only if criteria were found after split/trim/filter\r\n                if (criteria.length > 0) {\r\n                    console.log(`Processing Doc ID: ${doc.ID_Document}, KKS_Names: '${kksString}', Parsed Criteria: [${criteria.join(', ')}]`);\r\n                    criteria.forEach(criterion => {\r\n                        acc[criterion] = (acc[criterion] || 0) + 1;\r\n                    });\r\n                } else if (kksString.trim() !== '') {\r\n                    // Log if the original string wasn't empty but split resulted in nothing (e.g., just commas)\r\n                     console.log(`Processing Doc ID: ${doc.ID_Document}, KKS_Names: '${kksString}' resulted in no valid criteria after split/trim.`);\r\n                }\r\n\r\n            } else if (kksString !== null && kksString !== undefined && kksString !== '') {\r\n                // Warn if KKS_Names is present but not a string\r\n                console.warn(\"KKS_Names is not a valid string for document:\", doc.ID_Document, \"Type:\", typeof kksString, \"Value:\", kksString);\r\n            }\r\n             // If KKS_Names is null, undefined, or empty string, silently skip\r\n            return acc;\r\n        }, {});\r\n\r\n        // Sort criteria alphabetically for consistent chart display\r\n        const sortedCriteria = Object.keys(kksCounts).sort((a, b) => a.localeCompare(b));\r\n        const counts = sortedCriteria.map(criterion => kksCounts[criterion]);\r\n\r\n        return {\r\n            criteria: sortedCriteria,\r\n            counts\r\n        };\r\n    };\r\n\r\n\r\n    // Вычисляем данные для графиков на основе отфильтрованных документов\r\n    // Use useMemo to prevent recalculating on every render unless dependencies change\r\n    const yearlyChartResult = useMemo(() => prepareYearlyChartData(filteredDocuments), [filteredDocuments]);\r\n    const kksChartResult = useMemo(() => prepareKKSChartData(filteredDocuments), [filteredDocuments]);\r\n\r\n\r\n    // --- Настройки для графиков ---\r\n\r\n    const getWorkerName = () => {\r\n        if (user.role !== 1 || !selectedWorker || !Array.isArray(workers)) return ''; // Add check for workers array\r\n        const worker = workers.find(w => w.ID_Worker === selectedWorker);\r\n        return worker ? worker.FName_Worker : `ID ${selectedWorker}`; // Assuming FName_Worker exists\r\n    }\r\n\r\n    const yearlyData = useMemo(() => ({\r\n        labels: yearlyChartResult.years,\r\n        datasets: [\r\n            {\r\n                label: user.role === 1\r\n                    ? `Документы (по годам) - ${getWorkerName() || 'Выберите работника'}` // Add fallback text\r\n                    : 'Мои документы (по годам)',\r\n                data: yearlyChartResult.counts,\r\n                backgroundColor: 'rgba(54, 162, 235, 0.6)',\r\n                borderColor: 'rgba(54, 162, 235, 1)',\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    }), [yearlyChartResult, user.role, selectedWorker, workers]); // Add dependencies\r\n\r\n     const cumulativeData = useMemo(() => ({\r\n        labels: yearlyChartResult.years,\r\n        datasets: [\r\n            {\r\n                label: user.role === 1\r\n                    ? `Нарастающий график - ${getWorkerName() || 'Выберите работника'}`\r\n                    : 'Мой нарастающий график',\r\n                data: yearlyChartResult.cumulativeCounts,\r\n                backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n                borderColor: 'rgba(75, 192, 192, 1)',\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    }), [yearlyChartResult, user.role, selectedWorker, workers]); // Add dependencies\r\n\r\n    const kksData = useMemo(() => ({\r\n        labels: kksChartResult.criteria,\r\n        datasets: [\r\n            {\r\n                label: user.role === 1\r\n                    ? `Документы по критериям ККС - ${getWorkerName() || 'Выберите работника'}`\r\n                    : 'Мои документы по критериям ККС',\r\n                data: kksChartResult.counts,\r\n                backgroundColor: 'rgba(255, 159, 64, 0.6)', // Orange color\r\n                borderColor: 'rgba(255, 159, 64, 1)',\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    }), [kksChartResult, user.role, selectedWorker, workers]); // Add dependencies\r\n\r\n\r\n    // --- Chart Options (using useMemo for optimization) ---\r\n     const commonOptions = useMemo(() => (titleText) => ({\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n            legend: {\r\n                position: 'top',\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: titleText,\r\n                font: { size: 16 } // Adjust font size if needed\r\n            },\r\n            tooltip: {\r\n                mode: 'index',\r\n                intersect: false,\r\n            }\r\n        },\r\n        scales: {\r\n            x: {\r\n                title: {\r\n                    display: true,\r\n                    text: titleText.includes('годам') ? 'Год' : (titleText.includes('ККС') ? 'Критерий ККС' : ''),\r\n                },\r\n                ticks: {\r\n                     autoSkip: true, // Allow skipping labels if too crowded\r\n                     maxRotation: 45, // Rotate labels if needed\r\n                     minRotation: 0\r\n                }\r\n            },\r\n            y: {\r\n                beginAtZero: true,\r\n                title: {\r\n                    display: true,\r\n                    text: 'Количество документов',\r\n                },\r\n                ticks: {\r\n                   // stepSize: 1, // Use only if integer steps are strictly required\r\n                    precision: 0, // Ensure integer ticks\r\n                    // Suggest max based on data to prevent large empty spaces, Chart.js usually handles this well\r\n                    // suggestedMax: Math.max(...(data?.datasets[0]?.data || [])) + 2 // Example if needed\r\n                }\r\n            },\r\n        },\r\n    }), []); // Empty dependency array as the function itself doesn't change\r\n\r\n    const yearlyOptions = useMemo(() => commonOptions(\r\n        user.role === 1\r\n            ? `Количество документов по годам (${getWorkerName() || 'Выберите работника'})`\r\n            : 'Мои документы по годам'\r\n    ), [commonOptions, user.role, selectedWorker, workers]); // Add dependencies\r\n\r\n    const cumulativeOptions = useMemo(() => commonOptions(\r\n        user.role === 1\r\n            ? `Нарастающий итог документов по годам (${getWorkerName() || 'Выберите работника'})`\r\n            : 'Мой нарастающий итог документов по годам'\r\n    ), [commonOptions, user.role, selectedWorker, workers]); // Add dependencies\r\n\r\n    const kksOptions = useMemo(() => commonOptions(\r\n        user.role === 1\r\n            ? `Распределение документов по критериям ККС (${getWorkerName() || 'Выберите работника'})`\r\n            : 'Мое распределение документов по критериям ККС'\r\n    ), [commonOptions, user.role, selectedWorker, workers]); // Add dependencies\r\n\r\n    // Helper to format date strings or return placeholder\r\n    const formatDate = (dateString) => {\r\n        if (!dateString) return 'N/A';\r\n        try {\r\n            const date = new Date(dateString);\r\n            // Check if date is valid after parsing\r\n            return isNaN(date.getTime()) ? 'Неверная дата' : date.toLocaleDateString();\r\n        } catch (e) {\r\n            console.error(\"Error formatting date:\", dateString, e);\r\n            return 'Ошибка даты';\r\n        }\r\n    };\r\n\r\n    // --- Рендеринг ---\r\n\r\n    if (loading) return <div className=\"loading\">Загрузка данных...</div>;\r\n    // Keep error display simple or enhance as needed\r\n    if (error) return (\r\n       <div className=\"error-container\">\r\n         <div className=\"error\">{error}</div>\r\n         <button onClick={handleBack} className=\"back-button\">Назад</button>\r\n       </div>\r\n    );\r\n\r\n    // Main component return\r\n    return (\r\n        <div className=\"analysis-container\">\r\n            <div className=\"analysis-header\">\r\n                <h1>Анализ документов</h1>\r\n                <div className=\"header-buttons\">\r\n                    <button onClick={handleBack} className=\"back-button\">Назад</button>\r\n                    <button onClick={handleLogout} className=\"logout-button\">Выйти</button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Worker Selector and View Mode Toggle (Only for Admin role 1) */}\r\n            {user.role === 1 && (\r\n                <div className=\"controls-container\">\r\n                    {/* Worker Selector */}\r\n                    <div className=\"worker-selector\">\r\n                         <label htmlFor=\"worker-select\">Работник:</label>\r\n                         {workers.length > 0 ? (\r\n                           <select\r\n                                id=\"worker-select\"\r\n                                value={selectedWorker ?? ''} // Use empty string if null for controlled component\r\n                                onChange={handleWorkerChange}\r\n                                className=\"worker-select\"\r\n                                disabled={loading}\r\n                            >\r\n                                {/* Optional: Add a placeholder */}\r\n                                <option value=\"\" disabled={selectedWorker !== null}>-- Выберите работника --</option>\r\n                                {workers.map(worker => (\r\n                                    <option key={worker.ID_Worker} value={worker.ID_Worker}>\r\n                                        {worker.FName_Worker || `ID ${worker.ID_Worker}`} {/* Fallback for name */}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                         ) : (\r\n                            <span className='no-workers-message'>Нет работников для выбора.</span>\r\n                         )}\r\n                    </div>\r\n\r\n                    {/* View Mode Toggle Buttons - Show only if workers exist */}\r\n                    {workers.length > 0 && (\r\n                        <div className=\"view-mode-buttons\">\r\n                            <button\r\n                                className={`view-mode-button ${viewMode === 'analysis' ? 'active' : ''}`}\r\n                                onClick={() => handleViewModeChange('analysis')}\r\n                                disabled={selectedWorker === null} // Disable if no worker selected\r\n                            >\r\n                                Анализ\r\n                            </button>\r\n                            <button\r\n                                className={`view-mode-button ${viewMode === 'documents' ? 'active' : ''}`}\r\n                                onClick={() => handleViewModeChange('documents')}\r\n                                disabled={selectedWorker === null} // Disable if no worker selected\r\n                            >\r\n                                Документы\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n\r\n            {/* Content Area: Charts or Document List */}\r\n            <div className=\"content-area\">\r\n                {viewMode === 'analysis' ? (\r\n                    // --- Analysis View (Charts) ---\r\n                     <div className=\"charts-grid\">\r\n                         {/* Show charts only if a worker is selected OR if user is not admin */}\r\n                         {(user.role !== 1 || selectedWorker !== null) && filteredDocuments.length > 0 ? (\r\n                            <>\r\n                                {/* Chart 1: Yearly Count */}\r\n                                <div className=\"chart-wrapper\">\r\n                                    <Bar options={yearlyOptions} data={yearlyData} />\r\n                                </div>\r\n\r\n                                {/* Chart 2: Cumulative Count */}\r\n                                <div className=\"chart-wrapper\">\r\n                                    <Bar options={cumulativeOptions} data={cumulativeData} />\r\n                                </div>\r\n\r\n                                {/* Chart 3: KKS Criteria */}\r\n                                <div className=\"chart-wrapper kks-chart-wrapper\">\r\n                                    {kksChartResult.criteria.length > 0 ? (\r\n                                        <Bar options={kksOptions} data={kksData} />\r\n                                    ) : (\r\n                                        <p className=\"no-data-message\">Нет данных по критериям ККС для отображения.</p>\r\n                                    )}\r\n                                </div>\r\n                            </>\r\n                         ) : (\r\n                            // Message when no documents or no worker selected for admin\r\n                             <div className=\"no-data-message full-width-message\">\r\n                                {user.role === 1 ?\r\n                                     (selectedWorker === null ? \"Пожалуйста, выберите работника для просмотра анализа.\" : `Нет документов для анализа у выбранного работника (${getWorkerName()}).`) :\r\n                                    \"У вас пока нет загруженных документов для анализа.\"\r\n                                }\r\n                             </div>\r\n                         )}\r\n                     </div>\r\n                ) : (\r\n                    // --- Documents View (Table) ---\r\n                     <div className=\"documents-list\">\r\n                        {/* Show table only if a worker is selected OR if user is not admin */}\r\n                        {(user.role !== 1 || selectedWorker !== null) && filteredDocuments.length > 0 ? (\r\n                            <table className=\"documents-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        {/* Optional: Add Worker Name column for Admin view */}\r\n                                        {user.role === 1 && <th>Работник</th>}\r\n                                        <th>Программа</th>\r\n                                        <th>Организация</th>\r\n                                        <th>Рег. номер</th> {/* Added Reg Number */}\r\n                                        <th>Дата выдачи</th>\r\n                                        <th>Действия</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {filteredDocuments.map((doc) => (\r\n                                        <tr key={doc.ID_Document}>\r\n                                            {/* Optional: Display worker name for admin */}\r\n                                            {user.role === 1 && <td>{doc.WorkerName || 'N/A'}</td>}\r\n                                            <td>{doc.ProgramName || 'N/A'}</td>\r\n                                             {/* Use OrgSName or OrgFName from backend */}\r\n                                            <td>{doc.OrgSName || doc.OrgFName || 'N/A'}</td>\r\n                                            <td>{doc.regnumber || 'N/A'}</td> {/* Added Reg Number */}\r\n                                            <td>{formatDate(doc.DateIssue)}</td>\r\n                                            <td>\r\n                                                <button\r\n                                                    className=\"details-button\"\r\n                                                    onClick={() => openModal(doc)} // <--- Call openModal on click\r\n                                                >\r\n                                                    Подробности\r\n                                                </button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                         ) : (\r\n                             // Message when no documents or no worker selected for admin\r\n                            <div className=\"no-data-message\">\r\n                                {user.role === 1 ?\r\n                                     (selectedWorker === null ? \"Пожалуйста, выберите работника для просмотра документов.\" : `Нет документов для выбранного работника (${getWorkerName()}).`) :\r\n                                    \"У вас пока нет загруженных документов.\"\r\n                                }\r\n                            </div>\r\n                         )}\r\n                     </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* --- Modal Definition --- */}\r\n            <Modal\r\n                isOpen={isModalOpen}\r\n                onRequestClose={closeModal} // Allows closing by clicking overlay or pressing Esc\r\n                contentLabel=\"Детали документа\" // For screen readers\r\n                className=\"modal-content\" // Class for modal styling\r\n                overlayClassName=\"modal-overlay\" // Class for overlay styling\r\n            >\r\n                {selectedDocumentForModal ? (\r\n                    <>\r\n                        <h2>Детали документа № {selectedDocumentForModal.regnumber || selectedDocumentForModal.ID_Document}</h2>\r\n                        <button onClick={closeModal} className=\"modal-close-button\">&times;</button>\r\n\r\n                        <div className=\"modal-details-grid\">\r\n                            <p><strong>Работник:</strong> {selectedDocumentForModal.WorkerName || 'N/A'}</p>\r\n                            <p><strong>Программа:</strong> {selectedDocumentForModal.ProgramName || 'N/A'}</p>\r\n                            <p><strong>Организация:</strong> {`${selectedDocumentForModal.OrgFName || ''} (${selectedDocumentForModal.OrgSName || 'N/A'})`}</p>\r\n                            <p><strong>Регистрационный номер:</strong> {selectedDocumentForModal.regnumber || 'N/A'}</p>\r\n                            <p><strong>Серия бланка:</strong> {selectedDocumentForModal.formseries || 'N/A'}</p>\r\n                            <p><strong>Номер бланка:</strong> {selectedDocumentForModal.formnumber || 'N/A'}</p>\r\n                            <p><strong>Дата выдачи:</strong> {formatDate(selectedDocumentForModal.DateIssue)}</p>\r\n                            <p><strong>Дата начала действия:</strong> {formatDate(selectedDocumentForModal.DataStart)}</p>\r\n                            <p><strong>Дата окончания действия:</strong> {formatDate(selectedDocumentForModal.DataEnd)}</p>\r\n                             <p className=\"kks-details\"><strong>Критерии ККС:</strong> {selectedDocumentForModal.KKS_Names?.split(',').map(k => k.trim()).filter(k => k).join(', ') || 'Нет данных'}</p>\r\n\r\n                            {/* Add more fields as needed */}\r\n                        </div>\r\n                    </>\r\n                ) : (\r\n                    <p>Загрузка деталей...</p> // Fallback content\r\n                )}\r\n            </Modal>\r\n            {/* --- End Modal Definition --- */}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DocumentAnalysis;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO,CAAC,CAAC;AAC7D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,aAAa,CAAC,CAAC;AACjC,SACIC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,QACH,UAAU;AACjB,SAASC,GAAG,QAAQ,iBAAiB;AACrC,OAAO,wBAAwB,CAAC,CAAC;;AAEjC;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACAb,KAAK,CAACc,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;;AAE9B;AACAZ,OAAO,CAACa,QAAQ,CACZZ,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MACJ,CAAC;AAED,SAASQ,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,qBAAA;EACxB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC0B,OAAO,EAAEC,UAAU,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC4B,cAAc,EAAEC,iBAAiB,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5D,MAAM,CAAC8B,OAAO,EAAEC,UAAU,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACgC,KAAK,EAAEC,QAAQ,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACkC,QAAQ,EAAEC,WAAW,CAAC,GAAGnC,QAAQ,CAAC,UAAU,CAAC;;EAEpD;EACA,MAAM,CAACoC,WAAW,EAAEC,cAAc,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACsC,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGvC,QAAQ,CAAC,IAAI,CAAC;EAC9E;;EAEA,MAAMwC,QAAQ,GAAGpC,WAAW,CAAC,CAAC;EAC9B,MAAMqC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;EAErD5C,SAAS,CAAC,MAAM;IACZ,MAAM6C,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1Bf,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,EAAE,CAAC;MACZ,IAAI;QACA;QACA,MAAMc,iBAAiB,GAAG,MAAM5C,KAAK,CAAC6C,GAAG,CAAC,qCAAqC,EAAE;UAC7EC,MAAM,EAAE;YACJC,MAAM,EAAET,IAAI,CAACU,EAAE;YAAE;YACjBC,IAAI,EAAEX,IAAI,CAACW;UACf;QACJ,CAAC,CAAC;QAEF,IAAI,CAACC,KAAK,CAACC,OAAO,CAACP,iBAAiB,CAACQ,IAAI,CAAC,EAAE;UACxCC,OAAO,CAACxB,KAAK,CAAC,uCAAuC,EAAEe,iBAAiB,CAACQ,IAAI,CAAC;UAC9E9B,YAAY,CAAC,EAAE,CAAC;QACpB,CAAC,MAAM;UACH+B,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEf,IAAI,CAACgB,SAAS,CAACX,iBAAiB,CAACQ,IAAI,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;UAClHlC,YAAY,CAACsB,iBAAiB,CAACQ,IAAI,CAAC;UACpC,IAAIR,iBAAiB,CAACQ,IAAI,CAACK,MAAM,GAAG,CAAC,EAAE;YAAA,IAAAC,qBAAA;YAClCL,OAAO,CAACC,GAAG,CAAC,6CAA6C,GAAAI,qBAAA,GAAEd,iBAAiB,CAACQ,IAAI,CAAC,CAAC,CAAC,cAAAM,qBAAA,uBAAzBA,qBAAA,CAA2BC,SAAS,CAAC;UACrG;QACJ;;QAEA;QACA,IAAIrB,IAAI,CAACW,IAAI,KAAK,CAAC,EAAE;UACjB,MAAMW,eAAe,GAAG,MAAM5D,KAAK,CAAC6C,GAAG,CAAC,mCAAmC,CAAC;UAC3E,IAAIK,KAAK,CAACC,OAAO,CAACS,eAAe,CAACR,IAAI,CAAC,EAAE;YACrC5B,UAAU,CAACoC,eAAe,CAACR,IAAI,CAAC;YAChC;YACA,IAAIQ,eAAe,CAACR,IAAI,CAACK,MAAM,GAAG,CAAC,IAAIhC,cAAc,KAAK,IAAI,EAAE;cAC7DC,iBAAiB,CAACkC,eAAe,CAACR,IAAI,CAAC,CAAC,CAAC,CAACS,SAAS,CAAC;YACvD,CAAC,MAAM,IAAID,eAAe,CAACR,IAAI,CAACK,MAAM,KAAK,CAAC,EAAE;cAC1C/B,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;YAC7B;YACA;UACJ,CAAC,MAAM;YACJ2B,OAAO,CAACxB,KAAK,CAAC,+BAA+B,EAAE+B,eAAe,CAACR,IAAI,CAAC;YACpE5B,UAAU,CAAC,EAAE,CAAC;YACdE,iBAAiB,CAAC,IAAI,CAAC;UAC1B;QACL,CAAC,MAAM;UACH;UACAF,UAAU,CAAC,EAAE,CAAC;UACdE,iBAAiB,CAAC,IAAI,CAAC;QAC3B;MAEJ,CAAC,CAAC,OAAOoC,GAAG,EAAE;QAAA,IAAAC,aAAA,EAAAC,kBAAA;QACVX,OAAO,CAACxB,KAAK,CAAC,6BAA6B,EAAEiC,GAAG,CAAC;QACjDhC,QAAQ,CAAC,EAAAiC,aAAA,GAAAD,GAAG,CAACG,QAAQ,cAAAF,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcX,IAAI,cAAAY,kBAAA,uBAAlBA,kBAAA,CAAoBnC,KAAK,KAAI,4BAA4B,CAAC;MACvE,CAAC,SAAS;QACLD,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACxB;IACJ,CAAC;IAED,IAAIU,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEU,EAAE,EAAE;MACZL,SAAS,CAAC,CAAC;IACf,CAAC,MAAM;MACHb,QAAQ,CAAC,oDAAoD,CAAC;MAC9DF,UAAU,CAAC,KAAK,CAAC;IACrB;IACE;EACJ,CAAC,EAAE,CAACU,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEU,EAAE,EAAEV,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW,IAAI,CAAC,CAAC,CAAC,CAAC;;EAE5B,MAAMiB,YAAY,GAAGA,CAAA,KAAM;IACvBzB,YAAY,CAAC0B,UAAU,CAAC,MAAM,CAAC;IAC/B9B,QAAQ,CAAC,QAAQ,CAAC;EACtB,CAAC;EAED,MAAM+B,UAAU,GAAGA,CAAA,KAAM;IACrB/B,QAAQ,CAACC,IAAI,CAACW,IAAI,KAAK,CAAC,GAAG,QAAQ,GAAG,OAAO,CAAC;EAClD,CAAC;EAED,MAAMoB,kBAAkB,GAAIC,KAAK,IAAK;IAClC;IACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IACxC,MAAMC,QAAQ,GAAGH,aAAa,GAAGI,QAAQ,CAACJ,aAAa,EAAE,EAAE,CAAC,GAAG,IAAI;IACnE7C,iBAAiB,CAACgD,QAAQ,CAAC;EAC/B,CAAC;EAGD,MAAME,oBAAoB,GAAIC,IAAI,IAAK;IACnC7C,WAAW,CAAC6C,IAAI,CAAC;EACrB,CAAC;;EAED;EACA,MAAMC,SAAS,GAAIC,GAAG,IAAK;IACvB1B,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEyB,GAAG,CAAC,CAAC,CAAC;IAC5C3C,2BAA2B,CAAC2C,GAAG,CAAC;IAChC7C,cAAc,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,MAAM8C,UAAU,GAAGA,CAAA,KAAM;IACrB9C,cAAc,CAAC,KAAK,CAAC;IACrBE,2BAA2B,CAAC,IAAI,CAAC,CAAC,CAAC;EACvC,CAAC;EACD;;EAEA;EACA,MAAM6C,iBAAiB,GAAGlF,OAAO,CAAC,MAAM;IACpC,IAAI4B,OAAO,IAAI,CAACuB,KAAK,CAACC,OAAO,CAAC9B,SAAS,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;;IAErD,IAAIiB,IAAI,CAACW,IAAI,KAAK,CAAC,EAAE;MACjB;MACA,IAAIxB,cAAc,KAAK,IAAI,EAAE;QACxB,OAAOJ,SAAS,CAAC6D,MAAM,CAACH,GAAG,IAAIA,GAAG,CAAClB,SAAS,KAAKpC,cAAc,CAAC;MACrE;MACA;MACC;MACD,OAAO,EAAE;MACV;MACA;MACA;MACA;MACA;MACA;MACA;IACH,CAAC,MAAM;MACH;MACC;MACD,OAAOJ,SAAS;IACpB;EACJ,CAAC,EAAE,CAACA,SAAS,EAAEI,cAAc,EAAEa,IAAI,CAACW,IAAI,EAAEtB,OAAO,CAAC,CAAC,CAAC,CAAC;;EAErD;EACA,MAAMwD,sBAAsB,GAAIC,IAAI,IAAK;IACrC,MAAMC,eAAe,GAAGD,IAAI,CAACE,MAAM,CAAC,CAACC,GAAG,EAAER,GAAG,KAAK;MAC9C,IAAI;QACA;QACA,IAAIA,GAAG,CAACS,SAAS,EAAE;UACf,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACX,GAAG,CAACS,SAAS,CAAC;UACpC,IAAI,CAACG,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE;YACxB,MAAMC,IAAI,GAAGJ,IAAI,CAACK,WAAW,CAAC,CAAC;YAC/BP,GAAG,CAACM,IAAI,CAAC,GAAG,CAACN,GAAG,CAACM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;UACpC,CAAC,MAAM;YACHxC,OAAO,CAAC0C,IAAI,CAAC,2CAA2C,EAAEhB,GAAG,CAACiB,WAAW,EAAE,QAAQ,EAAEjB,GAAG,CAACS,SAAS,CAAC;UACvG;QACJ,CAAC,MAAM;UACFnC,OAAO,CAAC0C,IAAI,CAAC,oCAAoC,EAAEhB,GAAG,CAACiB,WAAW,CAAC;QACxE;MACJ,CAAC,CAAC,OAAOC,CAAC,EAAE;QACR5C,OAAO,CAACxB,KAAK,CAAC,0CAA0C,EAAEkD,GAAG,CAACiB,WAAW,EAAEC,CAAC,CAAC;MACjF;MACA,OAAOV,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;IAGN,MAAMW,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACf,eAAe,CAAC,CAACgB,GAAG,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;IAC5E,MAAMC,WAAW,GAAG,IAAIhB,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;;IAE5C;IACA,MAAMa,WAAW,GAAGT,KAAK,CAACzC,MAAM,GAAG,CAAC,GAAGmD,IAAI,CAACC,GAAG,CAAC,GAAGX,KAAK,CAAC,GAAGQ,WAAW;IACvE,MAAMI,WAAW,GAAGZ,KAAK,CAACzC,MAAM,GAAG,CAAC,GAAGmD,IAAI,CAACG,GAAG,CAAC,GAAGb,KAAK,CAAC,GAAGQ,WAAW;IACvE;IACA,MAAMM,SAAS,GAAGL,WAAW;IAC7B,MAAMM,OAAO,GAAGL,IAAI,CAACG,GAAG,CAACD,WAAW,EAAEJ,WAAW,CAAC;IAElD,MAAMQ,QAAQ,GAAG,EAAE;IACnB,IAAIF,SAAS,IAAIC,OAAO,EAAE;MAAE;MACvB,KAAK,IAAIpB,IAAI,GAAGmB,SAAS,EAAEnB,IAAI,IAAIoB,OAAO,EAAEpB,IAAI,EAAE,EAAE;QACjDqB,QAAQ,CAACC,IAAI,CAACtB,IAAI,CAAC;MACtB;IACL,CAAC,MAAM,IAAIK,KAAK,CAACzC,MAAM,KAAK,CAAC,IAAI2B,IAAI,CAAC3B,MAAM,GAAG,CAAC,EAAE;MAC9C;MACCJ,OAAO,CAAC0C,IAAI,CAAC,sEAAsE,CAAC;MACpFmB,QAAQ,CAACC,IAAI,CAACT,WAAW,CAAC;IAC/B,CAAC,MAAM,IAAItB,IAAI,CAAC3B,MAAM,KAAK,CAAC,EAAE;MACzB;MACA;MACA;IAAA;IAIL,MAAM2D,MAAM,GAAGF,QAAQ,CAACb,GAAG,CAACR,IAAI,IAAIR,eAAe,CAACQ,IAAI,CAAC,IAAI,CAAC,CAAC;IAE/D,MAAMwB,gBAAgB,GAAGD,MAAM,CAAC9B,MAAM,CAAC,CAACC,GAAG,EAAE+B,KAAK,EAAEC,KAAK,KAAK;MAC1DhC,GAAG,CAAC4B,IAAI,CAACI,KAAK,KAAK,CAAC,GAAGD,KAAK,GAAG,CAAC/B,GAAG,CAACgC,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,IAAID,KAAK,CAAC;MAC7D,OAAO/B,GAAG;IACd,CAAC,EAAE,EAAE,CAAC;IAEN,OAAO;MACHW,KAAK,EAAEgB,QAAQ;MACfE,MAAM;MACNC;IACJ,CAAC;EACL,CAAC;;EAGD;EACA,MAAMG,mBAAmB,GAAIpC,IAAI,IAAK;IAClC,MAAMqC,SAAS,GAAGrC,IAAI,CAACE,MAAM,CAAC,CAACC,GAAG,EAAER,GAAG,KAAK;MACxC,MAAM2C,SAAS,GAAG3C,GAAG,CAACpB,SAAS;MAC9B;MACD,IAAI+D,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;QAC5C,MAAMC,QAAQ,GAAGD,SAAS,CAACE,KAAK,CAAC,GAAG,CAAC,CAChCvB,GAAG,CAACwB,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;QAAA,CACvB5C,MAAM,CAAC2C,GAAG,IAAIA,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;;QAEhC;QACA,IAAIF,QAAQ,CAAClE,MAAM,GAAG,CAAC,EAAE;UACrBJ,OAAO,CAACC,GAAG,CAAC,sBAAsByB,GAAG,CAACiB,WAAW,iBAAiB0B,SAAS,wBAAwBC,QAAQ,CAACI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;UAC1HJ,QAAQ,CAACK,OAAO,CAACC,SAAS,IAAI;YAC1B1C,GAAG,CAAC0C,SAAS,CAAC,GAAG,CAAC1C,GAAG,CAAC0C,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;UAC9C,CAAC,CAAC;QACN,CAAC,MAAM,IAAIP,SAAS,CAACI,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UAChC;UACCzE,OAAO,CAACC,GAAG,CAAC,sBAAsByB,GAAG,CAACiB,WAAW,iBAAiB0B,SAAS,mDAAmD,CAAC;QACpI;MAEJ,CAAC,MAAM,IAAIA,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAKQ,SAAS,IAAIR,SAAS,KAAK,EAAE,EAAE;QAC1E;QACArE,OAAO,CAAC0C,IAAI,CAAC,+CAA+C,EAAEhB,GAAG,CAACiB,WAAW,EAAE,OAAO,EAAE,OAAO0B,SAAS,EAAE,QAAQ,EAAEA,SAAS,CAAC;MAClI;MACC;MACD,OAAOnC,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEN;IACA,MAAM4C,cAAc,GAAGhC,MAAM,CAACC,IAAI,CAACqB,SAAS,CAAC,CAAClB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC4B,aAAa,CAAC3B,CAAC,CAAC,CAAC;IAChF,MAAMW,MAAM,GAAGe,cAAc,CAAC9B,GAAG,CAAC4B,SAAS,IAAIR,SAAS,CAACQ,SAAS,CAAC,CAAC;IAEpE,OAAO;MACHN,QAAQ,EAAEQ,cAAc;MACxBf;IACJ,CAAC;EACL,CAAC;;EAGD;EACA;EACA,MAAMiB,iBAAiB,GAAGtI,OAAO,CAAC,MAAMoF,sBAAsB,CAACF,iBAAiB,CAAC,EAAE,CAACA,iBAAiB,CAAC,CAAC;EACvG,MAAMqD,cAAc,GAAGvI,OAAO,CAAC,MAAMyH,mBAAmB,CAACvC,iBAAiB,CAAC,EAAE,CAACA,iBAAiB,CAAC,CAAC;;EAGjG;;EAEA,MAAMsD,aAAa,GAAGA,CAAA,KAAM;IACxB,IAAIjG,IAAI,CAACW,IAAI,KAAK,CAAC,IAAI,CAACxB,cAAc,IAAI,CAACyB,KAAK,CAACC,OAAO,CAAC5B,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IAC9E,MAAMiH,MAAM,GAAGjH,OAAO,CAACkH,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC7E,SAAS,KAAKpC,cAAc,CAAC;IAChE,OAAO+G,MAAM,GAAGA,MAAM,CAACG,YAAY,GAAG,MAAMlH,cAAc,EAAE,CAAC,CAAC;EAClE,CAAC;EAED,MAAMmH,UAAU,GAAG7I,OAAO,CAAC,OAAO;IAC9B8I,MAAM,EAAER,iBAAiB,CAACnC,KAAK;IAC/B4C,QAAQ,EAAE,CACN;MACIC,KAAK,EAAEzG,IAAI,CAACW,IAAI,KAAK,CAAC,GAChB,0BAA0BsF,aAAa,CAAC,CAAC,IAAI,oBAAoB,EAAE,CAAC;MAAA,EACpE,0BAA0B;MAChCnF,IAAI,EAAEiF,iBAAiB,CAACjB,MAAM;MAC9B4B,eAAe,EAAE,yBAAyB;MAC1CC,WAAW,EAAE,uBAAuB;MACpCC,WAAW,EAAE;IACjB,CAAC;EAET,CAAC,CAAC,EAAE,CAACb,iBAAiB,EAAE/F,IAAI,CAACW,IAAI,EAAExB,cAAc,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC;;EAE7D,MAAM4H,cAAc,GAAGpJ,OAAO,CAAC,OAAO;IACnC8I,MAAM,EAAER,iBAAiB,CAACnC,KAAK;IAC/B4C,QAAQ,EAAE,CACN;MACIC,KAAK,EAAEzG,IAAI,CAACW,IAAI,KAAK,CAAC,GAChB,wBAAwBsF,aAAa,CAAC,CAAC,IAAI,oBAAoB,EAAE,GACjE,wBAAwB;MAC9BnF,IAAI,EAAEiF,iBAAiB,CAAChB,gBAAgB;MACxC2B,eAAe,EAAE,yBAAyB;MAC1CC,WAAW,EAAE,uBAAuB;MACpCC,WAAW,EAAE;IACjB,CAAC;EAET,CAAC,CAAC,EAAE,CAACb,iBAAiB,EAAE/F,IAAI,CAACW,IAAI,EAAExB,cAAc,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC;;EAE9D,MAAM6H,OAAO,GAAGrJ,OAAO,CAAC,OAAO;IAC3B8I,MAAM,EAAEP,cAAc,CAACX,QAAQ;IAC/BmB,QAAQ,EAAE,CACN;MACIC,KAAK,EAAEzG,IAAI,CAACW,IAAI,KAAK,CAAC,GAChB,gCAAgCsF,aAAa,CAAC,CAAC,IAAI,oBAAoB,EAAE,GACzE,gCAAgC;MACtCnF,IAAI,EAAEkF,cAAc,CAAClB,MAAM;MAC3B4B,eAAe,EAAE,yBAAyB;MAAE;MAC5CC,WAAW,EAAE,uBAAuB;MACpCC,WAAW,EAAE;IACjB,CAAC;EAET,CAAC,CAAC,EAAE,CAACZ,cAAc,EAAEhG,IAAI,CAACW,IAAI,EAAExB,cAAc,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC;;EAG3D;EACC,MAAM8H,aAAa,GAAGtJ,OAAO,CAAC,MAAOuJ,SAAS,KAAM;IACjDC,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE,KAAK;IAC1BC,OAAO,EAAE;MACLC,MAAM,EAAE;QACJC,QAAQ,EAAE;MACd,CAAC;MACDC,KAAK,EAAE;QACHC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAER,SAAS;QACfS,IAAI,EAAE;UAAEC,IAAI,EAAE;QAAG,CAAC,CAAC;MACvB,CAAC;MACDC,OAAO,EAAE;QACLpF,IAAI,EAAE,OAAO;QACbqF,SAAS,EAAE;MACf;IACJ,CAAC;IACDC,MAAM,EAAE;MACJC,CAAC,EAAE;QACCR,KAAK,EAAE;UACHC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAER,SAAS,CAACe,QAAQ,CAAC,OAAO,CAAC,GAAG,KAAK,GAAIf,SAAS,CAACe,QAAQ,CAAC,KAAK,CAAC,GAAG,cAAc,GAAG;QAC9F,CAAC;QACDC,KAAK,EAAE;UACFC,QAAQ,EAAE,IAAI;UAAE;UAChBC,WAAW,EAAE,EAAE;UAAE;UACjBC,WAAW,EAAE;QAClB;MACJ,CAAC;MACDC,CAAC,EAAE;QACCC,WAAW,EAAE,IAAI;QACjBf,KAAK,EAAE;UACHC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE;QACV,CAAC;QACDQ,KAAK,EAAE;UACJ;UACCM,SAAS,EAAE,CAAC,CAAE;UACd;UACA;QACJ;MACJ;IACJ;EACJ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAET,MAAMC,aAAa,GAAG9K,OAAO,CAAC,MAAMsJ,aAAa,CAC7C/G,IAAI,CAACW,IAAI,KAAK,CAAC,GACT,mCAAmCsF,aAAa,CAAC,CAAC,IAAI,oBAAoB,GAAG,GAC7E,wBACV,CAAC,EAAE,CAACc,aAAa,EAAE/G,IAAI,CAACW,IAAI,EAAExB,cAAc,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEzD,MAAMuJ,iBAAiB,GAAG/K,OAAO,CAAC,MAAMsJ,aAAa,CACjD/G,IAAI,CAACW,IAAI,KAAK,CAAC,GACT,yCAAyCsF,aAAa,CAAC,CAAC,IAAI,oBAAoB,GAAG,GACnF,0CACV,CAAC,EAAE,CAACc,aAAa,EAAE/G,IAAI,CAACW,IAAI,EAAExB,cAAc,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEzD,MAAMwJ,UAAU,GAAGhL,OAAO,CAAC,MAAMsJ,aAAa,CAC1C/G,IAAI,CAACW,IAAI,KAAK,CAAC,GACT,8CAA8CsF,aAAa,CAAC,CAAC,IAAI,oBAAoB,GAAG,GACxF,+CACV,CAAC,EAAE,CAACc,aAAa,EAAE/G,IAAI,CAACW,IAAI,EAAExB,cAAc,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEzD;EACA,MAAMyJ,UAAU,GAAIC,UAAU,IAAK;IAC/B,IAAI,CAACA,UAAU,EAAE,OAAO,KAAK;IAC7B,IAAI;MACA,MAAMxF,IAAI,GAAG,IAAIC,IAAI,CAACuF,UAAU,CAAC;MACjC;MACA,OAAOtF,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,GAAG,eAAe,GAAGH,IAAI,CAACyF,kBAAkB,CAAC,CAAC;IAC9E,CAAC,CAAC,OAAOjF,CAAC,EAAE;MACR5C,OAAO,CAACxB,KAAK,CAAC,wBAAwB,EAAEoJ,UAAU,EAAEhF,CAAC,CAAC;MACtD,OAAO,aAAa;IACxB;EACJ,CAAC;;EAED;;EAEA,IAAItE,OAAO,EAAE,oBAAOd,OAAA;IAAKsK,SAAS,EAAC,SAAS;IAAAC,QAAA,EAAC;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACrE;EACA,IAAI3J,KAAK,EAAE,oBACRhB,OAAA;IAAKsK,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BvK,OAAA;MAAKsK,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEvJ;IAAK;MAAAwJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACpC3K,OAAA;MAAQ4K,OAAO,EAAErH,UAAW;MAAC+G,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChE,CAAC;;EAGT;EACA,oBACI3K,OAAA;IAAKsK,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBAC/BvK,OAAA;MAAKsK,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC5BvK,OAAA;QAAAuK,QAAA,EAAI;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1B3K,OAAA;QAAKsK,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3BvK,OAAA;UAAQ4K,OAAO,EAAErH,UAAW;UAAC+G,SAAS,EAAC,aAAa;UAAAC,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACnE3K,OAAA;UAAQ4K,OAAO,EAAEvH,YAAa;UAACiH,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,EAGLlJ,IAAI,CAACW,IAAI,KAAK,CAAC,iBACZpC,OAAA;MAAKsK,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBAE/BvK,OAAA;QAAKsK,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC3BvK,OAAA;UAAO6K,OAAO,EAAC,eAAe;UAAAN,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,EAC/CjK,OAAO,CAACkC,MAAM,GAAG,CAAC,gBACjB5C,OAAA;UACKmC,EAAE,EAAC,eAAe;UAClByB,KAAK,EAAEhD,cAAc,aAAdA,cAAc,cAAdA,cAAc,GAAI,EAAG,CAAC;UAAA;UAC7BkK,QAAQ,EAAEtH,kBAAmB;UAC7B8G,SAAS,EAAC,eAAe;UACzBS,QAAQ,EAAEjK,OAAQ;UAAAyJ,QAAA,gBAGlBvK,OAAA;YAAQ4D,KAAK,EAAC,EAAE;YAACmH,QAAQ,EAAEnK,cAAc,KAAK,IAAK;YAAA2J,QAAA,EAAC;UAAwB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACpFjK,OAAO,CAAC8E,GAAG,CAACmC,MAAM,iBACf3H,OAAA;YAA+B4D,KAAK,EAAE+D,MAAM,CAAC3E,SAAU;YAAAuH,QAAA,GAClD5C,MAAM,CAACG,YAAY,IAAI,MAAMH,MAAM,CAAC3E,SAAS,EAAE,EAAC,GAAC;UAAA,GADzC2E,MAAM,CAAC3E,SAAS;YAAAwH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAErB,CACX,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,gBAET3K,OAAA;UAAMsK,SAAS,EAAC,oBAAoB;UAAAC,QAAA,EAAC;QAA0B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CACvE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,EAGLjK,OAAO,CAACkC,MAAM,GAAG,CAAC,iBACf5C,OAAA;QAAKsK,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAC9BvK,OAAA;UACIsK,SAAS,EAAE,oBAAoBpJ,QAAQ,KAAK,UAAU,GAAG,QAAQ,GAAG,EAAE,EAAG;UACzE0J,OAAO,EAAEA,CAAA,KAAM7G,oBAAoB,CAAC,UAAU,CAAE;UAChDgH,QAAQ,EAAEnK,cAAc,KAAK,IAAK,CAAC;UAAA;UAAA2J,QAAA,EACtC;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT3K,OAAA;UACIsK,SAAS,EAAE,oBAAoBpJ,QAAQ,KAAK,WAAW,GAAG,QAAQ,GAAG,EAAE,EAAG;UAC1E0J,OAAO,EAAEA,CAAA,KAAM7G,oBAAoB,CAAC,WAAW,CAAE;UACjDgH,QAAQ,EAAEnK,cAAc,KAAK,IAAK,CAAC;UAAA;UAAA2J,QAAA,EACtC;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACR,eAGD3K,OAAA;MAAKsK,SAAS,EAAC,cAAc;MAAAC,QAAA,EACxBrJ,QAAQ,KAAK,UAAU;MAAA;MACpB;MACClB,OAAA;QAAKsK,SAAS,EAAC,aAAa;QAAAC,QAAA,EAEvB,CAAC9I,IAAI,CAACW,IAAI,KAAK,CAAC,IAAIxB,cAAc,KAAK,IAAI,KAAKwD,iBAAiB,CAACxB,MAAM,GAAG,CAAC,gBAC1E5C,OAAA,CAAAE,SAAA;UAAAqK,QAAA,gBAEIvK,OAAA;YAAKsK,SAAS,EAAC,eAAe;YAAAC,QAAA,eAC1BvK,OAAA,CAACF,GAAG;cAACkL,OAAO,EAAEhB,aAAc;cAACzH,IAAI,EAAEwF;YAAW;cAAAyC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChD,CAAC,eAGN3K,OAAA;YAAKsK,SAAS,EAAC,eAAe;YAAAC,QAAA,eAC1BvK,OAAA,CAACF,GAAG;cAACkL,OAAO,EAAEf,iBAAkB;cAAC1H,IAAI,EAAE+F;YAAe;cAAAkC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxD,CAAC,eAGN3K,OAAA;YAAKsK,SAAS,EAAC,iCAAiC;YAAAC,QAAA,EAC3C9C,cAAc,CAACX,QAAQ,CAAClE,MAAM,GAAG,CAAC,gBAC/B5C,OAAA,CAACF,GAAG;cAACkL,OAAO,EAAEd,UAAW;cAAC3H,IAAI,EAAEgG;YAAQ;cAAAiC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,gBAE3C3K,OAAA;cAAGsK,SAAS,EAAC,iBAAiB;cAAAC,QAAA,EAAC;YAA4C;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UACjF;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA,eACR,CAAC;QAAA;QAEH;QACC3K,OAAA;UAAKsK,SAAS,EAAC,oCAAoC;UAAAC,QAAA,EAC/C9I,IAAI,CAACW,IAAI,KAAK,CAAC,GACVxB,cAAc,KAAK,IAAI,GAAG,uDAAuD,GAAG,sDAAsD8G,aAAa,CAAC,CAAC,IAAI,GAC/J;QAAoD;UAAA8C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEtD;MACR;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;MAAA;MAEP;MACC3K,OAAA;QAAKsK,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAE3B,CAAC9I,IAAI,CAACW,IAAI,KAAK,CAAC,IAAIxB,cAAc,KAAK,IAAI,KAAKwD,iBAAiB,CAACxB,MAAM,GAAG,CAAC,gBACzE5C,OAAA;UAAOsK,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BvK,OAAA;YAAAuK,QAAA,eACIvK,OAAA;cAAAuK,QAAA,GAEK9I,IAAI,CAACW,IAAI,KAAK,CAAC,iBAAIpC,OAAA;gBAAAuK,QAAA,EAAI;cAAQ;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACrC3K,OAAA;gBAAAuK,QAAA,EAAI;cAAS;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAClB3K,OAAA;gBAAAuK,QAAA,EAAI;cAAW;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACpB3K,OAAA;gBAAAuK,QAAA,EAAI;cAAU;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,KAAC,eACpB3K,OAAA;gBAAAuK,QAAA,EAAI;cAAW;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACpB3K,OAAA;gBAAAuK,QAAA,EAAI;cAAQ;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACR3K,OAAA;YAAAuK,QAAA,EACKnG,iBAAiB,CAACoB,GAAG,CAAEtB,GAAG,iBACvBlE,OAAA;cAAAuK,QAAA,GAEK9I,IAAI,CAACW,IAAI,KAAK,CAAC,iBAAIpC,OAAA;gBAAAuK,QAAA,EAAKrG,GAAG,CAAC+G,UAAU,IAAI;cAAK;gBAAAT,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACtD3K,OAAA;gBAAAuK,QAAA,EAAKrG,GAAG,CAACgH,WAAW,IAAI;cAAK;gBAAAV,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAEnC3K,OAAA;gBAAAuK,QAAA,EAAKrG,GAAG,CAACiH,QAAQ,IAAIjH,GAAG,CAACkH,QAAQ,IAAI;cAAK;gBAAAZ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAChD3K,OAAA;gBAAAuK,QAAA,EAAKrG,GAAG,CAACmH,SAAS,IAAI;cAAK;gBAAAb,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,KAAC,eAClC3K,OAAA;gBAAAuK,QAAA,EAAKJ,UAAU,CAACjG,GAAG,CAACS,SAAS;cAAC;gBAAA6F,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACpC3K,OAAA;gBAAAuK,QAAA,eACIvK,OAAA;kBACIsK,SAAS,EAAC,gBAAgB;kBAC1BM,OAAO,EAAEA,CAAA,KAAM3G,SAAS,CAACC,GAAG,CAAE,CAAC;kBAAA;kBAAAqG,QAAA,EAClC;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACT,CAAC;YAAA,GAfAzG,GAAG,CAACiB,WAAW;cAAAqF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAgBpB,CACP;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;QAAA;QAEP;QACD3K,OAAA;UAAKsK,SAAS,EAAC,iBAAiB;UAAAC,QAAA,EAC3B9I,IAAI,CAACW,IAAI,KAAK,CAAC,GACVxB,cAAc,KAAK,IAAI,GAAG,0DAA0D,GAAG,4CAA4C8G,aAAa,CAAC,CAAC,IAAI,GACxJ;QAAwC;UAAA8C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAE3C;MACP;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IACT;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAGN3K,OAAA,CAACX,KAAK;MACFiM,MAAM,EAAElK,WAAY;MACpBmK,cAAc,EAAEpH,UAAW,CAAC;MAAA;MAC5BqH,YAAY,EAAC,6FAAkB,CAAC;MAAA;MAChClB,SAAS,EAAC,eAAe,CAAC;MAAA;MAC1BmB,gBAAgB,EAAC,eAAe,CAAC;MAAA;MAAAlB,QAAA,EAEhCjJ,wBAAwB,gBACrBtB,OAAA,CAAAE,SAAA;QAAAqK,QAAA,gBACIvK,OAAA;UAAAuK,QAAA,GAAI,qGAAmB,EAACjJ,wBAAwB,CAAC+J,SAAS,IAAI/J,wBAAwB,CAAC6D,WAAW;QAAA;UAAAqF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxG3K,OAAA;UAAQ4K,OAAO,EAAEzG,UAAW;UAACmG,SAAS,EAAC,oBAAoB;UAAAC,QAAA,EAAC;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAE5E3K,OAAA;UAAKsK,SAAS,EAAC,oBAAoB;UAAAC,QAAA,gBAC/BvK,OAAA;YAAAuK,QAAA,gBAAGvK,OAAA;cAAAuK,QAAA,EAAQ;YAAS;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACrJ,wBAAwB,CAAC2J,UAAU,IAAI,KAAK;UAAA;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChF3K,OAAA;YAAAuK,QAAA,gBAAGvK,OAAA;cAAAuK,QAAA,EAAQ;YAAU;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACrJ,wBAAwB,CAAC4J,WAAW,IAAI,KAAK;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClF3K,OAAA;YAAAuK,QAAA,gBAAGvK,OAAA;cAAAuK,QAAA,EAAQ;YAAY;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAAC,GAAGrJ,wBAAwB,CAAC8J,QAAQ,IAAI,EAAE,KAAK9J,wBAAwB,CAAC6J,QAAQ,IAAI,KAAK,GAAG;UAAA;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnI3K,OAAA;YAAAuK,QAAA,gBAAGvK,OAAA;cAAAuK,QAAA,EAAQ;YAAsB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACrJ,wBAAwB,CAAC+J,SAAS,IAAI,KAAK;UAAA;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC5F3K,OAAA;YAAAuK,QAAA,gBAAGvK,OAAA;cAAAuK,QAAA,EAAQ;YAAa;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACrJ,wBAAwB,CAACoK,UAAU,IAAI,KAAK;UAAA;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpF3K,OAAA;YAAAuK,QAAA,gBAAGvK,OAAA;cAAAuK,QAAA,EAAQ;YAAa;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACrJ,wBAAwB,CAACqK,UAAU,IAAI,KAAK;UAAA;YAAAnB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpF3K,OAAA;YAAAuK,QAAA,gBAAGvK,OAAA;cAAAuK,QAAA,EAAQ;YAAY;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACR,UAAU,CAAC7I,wBAAwB,CAACqD,SAAS,CAAC;UAAA;YAAA6F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrF3K,OAAA;YAAAuK,QAAA,gBAAGvK,OAAA;cAAAuK,QAAA,EAAQ;YAAqB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACR,UAAU,CAAC7I,wBAAwB,CAACsK,SAAS,CAAC;UAAA;YAAApB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC9F3K,OAAA;YAAAuK,QAAA,gBAAGvK,OAAA;cAAAuK,QAAA,EAAQ;YAAwB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACR,UAAU,CAAC7I,wBAAwB,CAACuK,OAAO,CAAC;UAAA;YAAArB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC9F3K,OAAA;YAAGsK,SAAS,EAAC,aAAa;YAAAC,QAAA,gBAACvK,OAAA;cAAAuK,QAAA,EAAQ;YAAa;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAAC,EAAApK,qBAAA,GAAAe,wBAAwB,CAACwB,SAAS,cAAAvC,qBAAA,uBAAlCA,qBAAA,CAAoCwG,KAAK,CAAC,GAAG,CAAC,CAACvB,GAAG,CAACsG,CAAC,IAAIA,CAAC,CAAC7E,IAAI,CAAC,CAAC,CAAC,CAAC5C,MAAM,CAACyH,CAAC,IAAIA,CAAC,CAAC,CAAC5E,IAAI,CAAC,IAAI,CAAC,KAAI,YAAY;UAAA;YAAAsD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAG3K,CAAC;MAAA,eACR,CAAC,gBAEH3K,OAAA;QAAAuK,QAAA,EAAG;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,CAAC;IAC9B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGP,CAAC;AAEd;AAACrK,EAAA,CAjkBQD,gBAAgB;EAAA,QAaJjB,WAAW;AAAA;AAAA2M,EAAA,GAbvB1L,gBAAgB;AAmkBzB,eAAeA,gBAAgB;AAAC,IAAA0L,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}